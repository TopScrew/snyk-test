name: Snyk Incremental Security Scan

on:
  pull_request:
    branches:
      - 'main'
      - 'a1'
      - 'releases-*'

jobs:
  snyk-incremental-scan:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout base branch
      - name: Checkout base branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.base.sha }}  # Get the commit of the base branch
          fetch-depth: 1  # Fetch only the latest commit of the base branch

      # Step 2: Set up Go environment
      - name: Setup Go environment
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      # Step 3: Install Snyk CLI
      - name: Install Snyk CLI
        uses: snyk/actions/setup@master

      # Step 4: Authenticate Snyk
      - name: Snyk Auth
        run: snyk auth ${{ secrets.SNYK_TOKEN }}

      # Step 5: Install dependencies on base branch
      - name: Install dependencies on base branch
        run: go mod tidy

      # Step 6: Generate baseline report from the base branch and save as artifact
      - name: Generate Baseline Snyk Report
        run: snyk test --package-manager=gomodules --severity-threshold=low --json > baseline-report.json || true

      - name: Upload Baseline Report
        uses: actions/upload-artifact@v3
        with:
          name: baseline-report
          path: baseline-report.json

      # Step 7: Checkout the current PR branch and generate the current report
      - name: Checkout current PR branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}  # Latest commit of the PR branch

      - name: Install dependencies on PR branch
        run: go mod tidy

      - name: Download Baseline Report Artifact
        uses: actions/download-artifact@v3
        with:
          name: baseline-report

      - name: Generate Current Snyk Report
        run: snyk test --package-manager=gomodules --severity-threshold=low --json > current-report.json || true

      # Step 8: Compare baseline and current reports for new vulnerabilities
      - name: Compare Snyk Reports for New Vulnerabilities
        run: |
          # Extract vulnerability IDs from baseline and current reports and sort them
          baseline_ids=$(jq -r '.vulnerabilities[].id' baseline-report.json | sort | uniq)
          current_ids=$(jq -r '.vulnerabilities[].id' current-report.json | sort | uniq)

          # Find IDs present in current but not in baseline report (new vulnerabilities introduced)
          new_vulns=$(comm -13 <(echo "$baseline_ids") <(echo "$current_ids") | grep '^snyk:lic')

          # Count the number of new non-compliant licenses
          vuln_count=$(echo "$new_vulns" | wc -l)

          # Define color codes
          RED='\033[0;31m'     # Red for errors/warnings
          GREEN='\033[0;32m'   # Green for success
          NC='\033[0m'         # No color (reset)

          if [ "$vuln_count" -gt 0 ]; then
            # Output the detailed non-compliant license issues first
            echo -e "${RED}The following ${vuln_count} new license issues with non-compliant open-source licenses have been introduced in this PR. Please address these before the PR can be merged:${NC}"
            for vuln_id in $new_vulns; do
              # Extract detailed information for each new non-compliant license issue
              jq --arg id "$vuln_id" '.vulnerabilities[] | select(.id == $id) | {
                id: .id,
                type: .type,
                license: .license,
                language: .language,
                description: .description,
                packageName: .packageName,
                creationTime: .creationTime,
                packageManager: .packageManager,
                publicationTime: .publicationTime,
                severity: .severity,
                from: .from,
                upgradePath: .upgradePath,
                version: .version,
                semver: .semver
              }' current-report.json
            done

            # Final statement with summary
            echo -e "\n${RED}Your PR has introduced ${vuln_count} new license issues that are not compliant with open-source standards. Please resolve these before merging.${NC}"
            exit 1  # Fail CI if new non-compliant licenses are found
          else
            echo -e "${GREEN}No new non-compliant open-source licenses have been introduced in this PR.${NC}"
          fi
